{"version":3,"sources":["item.service.ts"],"names":["ItemService","http","this","baseUrl","prototype","getLatest","num","url","get","map","response","json","catch","handleError","getMostViewed","Response","getRandom","id","Error","res","error","console","Observable_1","Observable","throw","__decorate","core_1","Injectable","http_1","Http"],"mappings":"k8BAeI,QAAAA,aAAoBC,MAAAC,KAAAD,KAAAA,KAIZC,KAAAC,QAAU,aA8CtB,MA5CIH,aAAAI,UAAAC,UAAA,SAAUC,KACN,GAAIC,KAAML,KAAKC,QAAU,YAEzB,OADW,OAAPG,MAAeC,KAAOD,KACnBJ,KAAKD,KAAKO,IAAID,KAChBE,IAAI,SAAAC,UAAY,MAAAA,UAASC,SACzBC,MAAMV,KAAKW,cAIpBb,YAAAI,UAAAU,cAAA,SAAeR,KACX,GAAIC,KAAKL,KAAKC,QAAU,gBAExB,OADW,OAAPG,MAAeC,KAAOD,KACnBJ,KAAKD,KAAKO,IAAID,KAChBE,IAAI,SAAAM,UAAY,MAAAA,UAASJ,SACzBC,MAAMV,KAAKW,cAGpBb,YAAAI,UAAAY,UAAA,SAAUV,KACN,GAAIC,KAAIL,KAAKC,SAAW,YAIxB,OAHW,OAAPG,MACAC,KAAMD,KAEHJ,KAAKD,KAAKO,IAAID,KAChBE,IAAI,SAAAM,UAAY,MAAAA,UAASJ,SACzBC,MAAMV,KAAKW,cAGpBb,YAAAI,UAAAI,IAAA,SAAIS,IACA,GAAU,MAANA,GACA,KAAM,IAAIC,OAAM,iBAEpB,IAAIX,KAAML,KAAKC,SAAW,OAASc,EACnC,OAAOf,MAAKD,KAAKO,IAAID,KAChBE,IAAI,SAAAU,KAAO,MAAMA,KAAIR,SACrBC,MAAMV,KAAKW,cAIZb,YAAAI,UAAAS,YAAR,SAAoBO,OAGhB,MADAC,SAAQD,MAAMA,OACPE,aAAAC,WAAWC,MAAMJ,MAAMT,OAAOS,OAAS,iBAhDzCpB,YAAWyB,YADvBC,OAAAC,6CAE6BC,OAAAC,QADjB7B","file":"item.service.js","sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { Http, Response } from \"@angular/http\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { Item } from \"./item\";\r\n\r\n/*\r\nInjectable decorator, declaring that ours is an\r\nInjectable class. Doing this will attach a set of metadata to our class that will\r\nbe consumed by the DI system upon instantiation. Basically, what we're doing\r\nhere is telling the DI injector that the constructor parameter(s) should be\r\ninstantiated using their declared type(s). The TypeScript code allows a very\r\nfluent syntax to achieve this result at constructor level,\r\n*/\r\n@Injectable()\r\nexport class ItemService{\r\n    constructor(private http: Http) {\r\n\r\n    }\r\n\r\n    private baseUrl = \"api/Items/\";   //web api Base Url\r\n    // calls the [GET] /api/items/GetLatest/{n} Web API method to retrieve the latest items.\r\n    getLatest(num?: number) {\r\n        var url = this.baseUrl + \"getLatest/\";\r\n        if (num != null) { url += num; }\r\n        return this.http.get(url)\r\n            .map(response => response.json())\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    //calls the [GET] / api / items / GetMostViewed / { n } Web API method to retrieve the most viewed items.\r\n    getMostViewed (num?: number) { \r\n        var url= this.baseUrl + \"GetMostViewed/\";\r\n        if (num != null) { url += num; }\r\n        return this.http.get(url)\r\n            .map(Response => Response.json())\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    getRandom(num?: number) {\r\n        var url=this.baseUrl += \"gerRandom/\";\r\n        if (num != null) {\r\n            url+= num;\r\n        }\r\n        return this.http.get(url)\r\n            .map(Response => Response.json())\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    get(id: number) {\r\n        if (id == null) {\r\n            throw new Error(\"id is required\");\r\n        }\r\n        var url = this.baseUrl += \"get/\" + id;\r\n        return this.http.get(url)\r\n            .map(res => <Item>res.json())\r\n            .catch(this.handleError);\r\n\r\n    }\r\n\r\n    private handleError(error: Response) {\r\n        // output errors to the console.\r\n        console.error(error);\r\n        return Observable.throw(error.json().error || \"Server error\");\r\n    }\r\n\r\n}"]}